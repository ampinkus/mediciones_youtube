<%- include('../partials/head.ejs') %> 
<%- include('../partials/homeNav.ejs') %>

<!-- CDN de Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

<link rel="stylesheet" href="../../public/styleGraficosYoutube.css" />

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Gráfico de Mediciones - YouTube</h2>
    <div class="d-flex align-items-center">
      <button class="btn btn-secondary me-2" id="moveLeftBtn">←</button>
      <button class="btn btn-secondary me-2" id="moveRightBtn">→</button>
      <button class="btn btn-secondary me-2" id="zoomInBtn">Zoom +</button>
      <button class="btn btn-secondary me-2" id="zoomOutBtn">Zoom -</button>
      <button class="btn btn-secondary me-2" id="resetZoomBtn">Vista Original</button>
      <a href="/graficosYouTube" class="btn btn-primary">Volver</a>
    </div>
  </div>

  <div class="chart-container" id="chartContainer" style="overflow-x: auto; min-height: 650px;">
    <canvas id="graficoYoutube" style="min-width: 800px; height: 650px;"></canvas>
  </div>
</div>

<script>
  const datosPorStream = <%- JSON.stringify(datosPorStream) %>;

  // Convertir labels a objetos Date para asegurar uso de hora local
  datosPorStream.forEach(stream => {
    stream.labels = stream.labels.map(label => new Date(label));
  });

  const colores = ['blue', 'red', 'green', 'purple', 'orange'];

  const datasets = datosPorStream.map((stream, index) => ({
    label: `Vistas del Stream - ${stream.nombreStream}`,
    data: stream.labels.map((label, i) => ({
      x: label,
      y: stream.data[i]
    })),
    borderColor: colores[index % colores.length],
    backgroundColor: colores[index % colores.length] + '33',
    fill: false,
    tension: 0.1,
    pointRadius: 5,
    pointHoverRadius: 7
  }));

  const labels = datosPorStream.length > 0 ? datosPorStream[0].labels : [];

  let originalMin = labels[0];
  let originalMax = labels[labels.length - 1];
  let currentMin = originalMin;
  let currentMax = originalMax;

  const ctx = document.getElementById('graficoYoutube').getContext('2d');

  const chart = new Chart(ctx, {
    type: 'line',
    data: { datasets },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { labels: { color: 'black', font: { size: 16 } } },
        tooltip: { bodyFont: { size: 16 }, titleFont: { size: 16 } }
      },
      scales: {
        x: {
          type: 'time',
          min: originalMin,
          max: originalMax,
          time: {
            tooltipFormat: 'dd/MM - HH:mm',
            displayFormats: { hour: 'dd/MM - HH:mm', minute: 'dd/MM - HH:mm' }
          },
          ticks: { color: 'black', font: { size: 14 } },
          grid: { color: '#cccccc' },
          title: {
            display: true,
            text: 'Fecha y hora de medición',
            color: 'black',
            font: { size: 16 }
          }
        },
        y: {
          beginAtZero: true,
          suggestedMin: 0,
          ticks: { color: 'black', font: { size: 14 }, precision: 0 },
          grid: { color: '#cccccc' },
          title: {
            display: true,
            text: 'Vistas del Stream',
            color: 'black',
            font: { size: 16 }
          }
        }
      }
    }
  });

  // Controles de zoom y desplazamiento
  function ajustarRango(factor) {
    const rangoActual = new Date(currentMax) - new Date(currentMin);
    const nuevoRango = rangoActual * factor;
    const centro = new Date(new Date(currentMin).getTime() + rangoActual / 2);

    currentMin = new Date(centro.getTime() - nuevoRango / 2);
    currentMax = new Date(centro.getTime() + nuevoRango / 2);

    chart.options.scales.x.min = currentMin;
    chart.options.scales.x.max = currentMax;
    chart.update();
  }

  document.getElementById('zoomInBtn').addEventListener('click', () => ajustarRango(0.9));
  document.getElementById('zoomOutBtn').addEventListener('click', () => ajustarRango(1.1));
  document.getElementById('resetZoomBtn').addEventListener('click', () => {
    currentMin = originalMin;
    currentMax = originalMax;
    chart.options.scales.x.min = originalMin;
    chart.options.scales.x.max = originalMax;
    chart.update();
  });

  document.getElementById('moveLeftBtn').addEventListener('click', () => {
    const move = (new Date(currentMax) - new Date(currentMin)) * 0.1;
    currentMin = new Date(new Date(currentMin).getTime() - move);
    currentMax = new Date(new Date(currentMax).getTime() - move);
    chart.options.scales.x.min = currentMin;
    chart.options.scales.x.max = currentMax;
    chart.update();
  });

  document.getElementById('moveRightBtn').addEventListener('click', () => {
    const move = (new Date(currentMax) - new Date(currentMin)) * 0.1;
    currentMin = new Date(new Date(currentMin).getTime() + move);
    currentMax = new Date(new Date(currentMax).getTime() + move);
    chart.options.scales.x.min = currentMin;
    chart.options.scales.x.max = currentMax;
    chart.update();
  });
</script>

<%- include('../partials/foot.ejs') %>
